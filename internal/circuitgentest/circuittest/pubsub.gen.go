// Code generated by circuitgen tool. DO NOT EDIT

package circuittest

import (
	"context"

	"github.com/cep21/circuit"
	"github.com/twitchtv/circuitgen/internal/circuitgentest"
	"github.com/twitchtv/circuitgen/internal/circuitgentest/model"
	"github.com/twitchtv/circuitgen/internal/circuitgentest/rep"
)

// CircuitWrapperPubsubConfig contains configuration for CircuitWrapperPubsub. All fields are optional
type CircuitWrapperPubsubConfig struct {
	// IsBadRequest is an optional bad request checker. It is useful to not count user errors as faults
	IsBadRequest func(error) bool

	// Prefix is prepended to all circuit names
	Prefix string

	// Defaults are used for all created circuits. Per-circuit configs override this
	Defaults circuit.Config

	// CircuitPublish is the configuration used for the Publish circuit. This overrides values set by Defaults
	CircuitPublish circuit.Config
	// CircuitPublishWithResult is the configuration used for the PublishWithResult circuit. This overrides values set by Defaults
	CircuitPublishWithResult circuit.Config
}

// CircuitWrapperPubsub is a circuit wrapper for circuitgentest.Publisher
type CircuitWrapperPubsub struct {
	circuitgentest.Publisher

	// IsBadRequest checks whether to count a user error against the circuit. It is recommended to set this
	IsBadRequest func(error) bool

	// CircuitPublish is the circuit for method Publish
	CircuitPublish *circuit.Circuit
	// CircuitPublishWithResult is the circuit for method PublishWithResult
	CircuitPublishWithResult *circuit.Circuit
}

// NewCircuitWrapperPubsub creates a new circuit wrapper and initializes circuits
func NewCircuitWrapperPubsub(
	manager *circuit.Manager,
	embedded circuitgentest.Publisher,
	conf CircuitWrapperPubsubConfig,
) (*CircuitWrapperPubsub, error) {
	if conf.IsBadRequest == nil {
		conf.IsBadRequest = func(err error) bool {
			return false
		}
	}

	w := &CircuitWrapperPubsub{
		Publisher:    embedded,
		IsBadRequest: conf.IsBadRequest,
	}

	var err error

	w.CircuitPublish, err = manager.CreateCircuit(conf.Prefix+"Pubsub.Publish", conf.CircuitPublish, conf.Defaults)
	if err != nil {
		return nil, err
	}

	w.CircuitPublishWithResult, err = manager.CreateCircuit(conf.Prefix+"Pubsub.PublishWithResult", conf.CircuitPublishWithResult, conf.Defaults)
	if err != nil {
		return nil, err
	}

	return w, nil
}

// Publish calls the embedded circuitgentest.Publisher's method Publish with CircuitPublish
func (w *CircuitWrapperPubsub) Publish(ctx context.Context, p1 map[circuitgentest.Seed][][]circuitgentest.Grant, p2 circuitgentest.TopicsList, p3 ...rep.PublishOption) (map[string]struct{}, error) {
	var r0 map[string]struct{}
	err := w.CircuitPublish.Run(ctx, func(ctx context.Context) error {
		var err error
		r0, err = w.Publisher.Publish(ctx, p1, p2, p3...)

		if w.IsBadRequest(err) {
			return &circuit.SimpleBadRequest{Err: err}
		}
		return err
	})

	if berr, ok := err.(*circuit.SimpleBadRequest); ok {
		err = berr.Err
	}

	return r0, err
}

// PublishWithResult calls the embedded circuitgentest.Publisher's method PublishWithResult with CircuitPublishWithResult
func (w *CircuitWrapperPubsub) PublishWithResult(ctx context.Context, p1 rep.PublishInput) (*model.Result, error) {
	var r0 *model.Result
	err := w.CircuitPublishWithResult.Run(ctx, func(ctx context.Context) error {
		var err error
		r0, err = w.Publisher.PublishWithResult(ctx, p1)

		if w.IsBadRequest(err) {
			return &circuit.SimpleBadRequest{Err: err}
		}
		return err
	})

	if berr, ok := err.(*circuit.SimpleBadRequest); ok {
		err = berr.Err
	}

	return r0, err
}

var _ circuitgentest.Publisher = (*CircuitWrapperPubsub)(nil)
